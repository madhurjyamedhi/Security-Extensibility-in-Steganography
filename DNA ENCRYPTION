# -*- coding: utf-8 -*-
"""DNA_lsb2-3-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cYcSo-14-tXqCt_jWGHa8T5vOZRRKiHH

#ENCRYPTION
"""

def bin_to_int(x):
  bin_val = x
  return (int(bin_val, 2))

def int_to_bin(x):
  int_val = x
  return ('{0:08b}'.format(int_val))

def rgb_to_int(rgb):
  r, g, b = rgb
  return (int(r, 2),
          int(g, 2),
          int(b, 2))

def rgb_to_bin(rgb):
  r, g, b = rgb
  return ('{0:08b}'.format(r),
          '{0:08b}'.format(g),
          '{0:08b}'.format(b))

def codons_to_amino(y) :
  a = []
  for acid in y :

    if acid == 'GCC' or acid == "GCA" or acid == "GCG" :
      a.append('A')
      if acid == "GCC" :
        a.append(0)
      if acid == "GCA" :
        a.append(1)
      if acid == "GCG" :
        a.append(2)    

    if acid == 'TAA' or acid == "TGA" or acid == "TAG" :
      a.append('B')
      if acid == "TAA" :
        a.append(0)
      if acid == "TGA" :
        a.append(1)
      if acid == "TAG" :
        a.append(2)

    if acid == "TGT" or acid == "TGC" :
      a.append('C')
      if acid == "TGT" :
        a.append(0)
      if acid == "TGC" :
        a.append(1)

    if acid == "GAT" or acid == "GAC" :
      a.append('D')
      if acid == "GAT" :
        a.append(0)
      if acid == "GAC" :
        a.append(1)

    if acid == "GAA" or acid == "GAG" :
      a.append('E')
      if acid == "GAA" :
        a.append(0)
      if acid == "GAG" :
        a.append(1)
  
    if acid == "TTT" or acid == "TTC" :
      a.append("F")
      if acid == "TTT" :
        a.append(0)
      if acid == "TTC" : 
        a.append(1)

    if acid == "GGT" or acid == "GGC" or acid == "GGA" or acid == "GGG" :
      a.append("G")
      if acid == "GGT" :
        a.append(0)
      if acid == "GGC" :
        a.append(1)
      if acid == "GGA" :
        a.append(2)
      if acid == "GGG" :
        a.append(3)    

    if acid == "CAT" or acid == "CAC" :
      a.append("H")
      if acid == "CAT" :
        a.append(0)
      if acid == "CAC" :
        a.append(1)  

    if acid == "ATT" or acid == "ATC" or acid == "ATA" :
      a.append("I")
      if acid == "ATT" :
        a.append(0)
      if acid == "ATC" :
        a.append(1)
      if acid == "ATA" : 
        a.append(2)
    
    if acid == "AAG" or acid == "AAA" :
      a.append("K")
      if acid == "AAG" :
        a.append(0)
      if acid == "AAA" :
        a.append(1)

    if acid == "CTT" or acid == "CTC" or acid == "CTA" or acid == "CTG" :
      a.append("L")
      if acid == "CTT" :
        a.append(0)
      if acid == "CTC" :
        a.append(1)
      if acid == "CTA" :
        a.append(2)
      if acid == "CTG" :
        a.append(3)    

    if acid == "ATG" :
      a.append("M")
      a.append(0)

    if acid == "AAT" or acid == "AAC" :
      a.append("N")
      if acid == "AAT" :
        a.append(0)
      if acid == "AAC" :
        a.append(1)

    if acid == "TTA" or acid == "TTG" :
      a.append("O")
      if acid == "TTA" :
        a.append(0)
      if acid == "TTG" :
        a.append(1)

    if acid == "CCT" or acid == "CCC"  or acid == "CCG" :
      a.append("P")
      if acid == "CCT" :
        a.append(0)
      if acid == "CCC" :
        a.append(1)
      if acid == "CCG" :
        a.append(2)

    if acid == "CCA" or acid == "CAG" :
      a.append("Q")
      if acid == "CCA" :
        a.append(0)
      if acid == "CAG" :
        a.append(1)

    if acid == "CGT" or acid == "CGC" or acid == "CGA" or acid == "CGG" :
      a.append("R")
      if acid == "CGT" :
        a.append(0)
      if acid == "CGC" :
        a.append(1)
      if acid == "CGA" :
        a.append(2)
      if acid == "CGG" :
        a.append(3)

    if acid == "TCT" or acid == "TCC" or acid == "TCA" or acid == "TCG" :
      a.append("S")
      if acid == "TCT" :
        a.append(0)
      if acid == "TCC" :
        a.append(1)
      if acid == "TCA" :
        a.append(2)
      if acid == "TCG" :
        a.append(3)

    if acid == "ACT" or acid == "ACC" or acid == "ACA" or acid == "ACG" :
      a.append("T")
      if acid == "ACT" :
        a.append(0)
      if acid == "ACC" :
        a.append(1)
      if acid == "ACA" :
        a.append(2)
      if acid == "ACG" : 
        a.append(3)
      
    if acid == "AGA" or acid == "AGG" :
      a.append("U")
      if acid == "AGA" :
        a.append(0)
      if acid == "AGG" :
        a.append(1)

    if acid == "GTT" or acid == "GCT" or acid == "GTA" or acid == "GTG" :
      a.append("V")
      if acid == "GTT" :
        a.append(0)
      if acid == "GCT" :
        a.append(1)
      if acid == "GTA" :
        a.append(2)
      if acid == "GTG" :
        a.append(3)   

    if acid == "TGG" :
      a.append("W")
      a.append(0)

    if acid == "AGT" or acid == "AGC" :
      a.append("X")
      if acid == "AGT" :
        a.append(0)
      if acid == "AGC" : 
        a.append(1)

    if acid == "TAT" :
      a.append("Y")
      a.append(0)

    if acid == "TAC" :
      a.append("Z")
      a.append(0)

  return(a)

def bits_to_nucleo(x) :
  n = []
  for b in x :
    if b == '00':
      n.append('A')
    elif b == '01':
      n.append('C')
    elif b == '10':
      n.append('G')
    else:
      n.append('T')

  return n

from PIL import Image

if __name__ == '__main__':

  #Taking in the secret message
  secret_msg = input("Enter the message to encrypt :\t")

  #converting the charachter values into binary value
  bin_array = []
  bin_array = ''.join(format(i, '08b') for i in bytearray(secret_msg, encoding='utf-8'))
  print(str(bin_array))


  #grouping the bits into groups of 2 bits each
  nucleo_bits = []
  n = 2
  nucleo_bits = [bin_array[i:i+n] for i in range(0, len(bin_array), n)]
  print(nucleo_bits)

  #converting each bits into nucleods
  nucleotides = ''.join(bits_to_nucleo(nucleo_bits))
  print(nucleotides)


  #preparing the DNA 
  dna = ""
  len_dna = len(nucleotides) % 3
  print(len_dna)

     
  if len_dna == 1 :
    nucleotides += 'AG'
  elif len_dna == 2 :
    nucleotides += 'T' 
  dna = nucleotides

  print(dna)


  #grouping into codons
  m = 3
  codons = [dna[j:j+m] for j in range(0, len(dna), m)]
  print(codons)

  #codons_to_amino(codons)
  amino_acids = codons_to_amino(codons)
  print(amino_acids)

  #creating amino acids
  bin_acids = ""
  for ac in amino_acids:
    if type(ac) != int:
      ac = ord(ac)
    bin_acids += int_to_bin(ac)
    print(bin_acids)
    print(len(bin_acids))
  #bin_acids = ''.join(format(k, '08b') for k in bytearray(amino_acids, encoding = 'utf-8'))


  acid_len = len(bin_acids)
  acid_index = 0

  dummy_img = Image.open('blue.jpg')
  dummy_img_pixelMap = dummy_img.load()

  new_image = Image.new(dummy_img.mode, dummy_img.size)
  new_image_pixelMap = new_image.load()


  for row in range(dummy_img.size[0]):
    for col in range(dummy_img.size[1]):

        list = dummy_img_pixelMap[row, col]
        r, g, b = rgb_to_bin(list)

        if acid_index < acid_len :
          new_rgb = (r[:6] + bin_acids[acid_index] + bin_acids[acid_index+1],
                     g[:5] + bin_acids[acid_index+2] + bin_acids[acid_index+3] + bin_acids[acid_index+4],
                     b[:5] + bin_acids[acid_index+5] + bin_acids[acid_index+6] + bin_acids[acid_index+7])

          #print(new_rgb)
          print(bin_acids[acid_index], bin_acids[acid_index +1], bin_acids[acid_index+2], bin_acids[acid_index+3], bin_acids[acid_index+4], bin_acids[acid_index+5], bin_acids[acid_index+6], bin_acids[acid_index+7])
         


          new_image_pixelMap[row, col] = rgb_to_int(new_rgb) 
          acid_index += 8

        else :
          new_image_pixelMap[row, col] = list


  dummy_img.close()
  new_image.save("stegoImage.png")
  new_image.close()  
  
  decrypt_dna(acid_len, len_dna)


  #calculating PSNR value

"""#DECRYPTION"""

def amino_to_codons(z):
  
  cods = []
  num_cod = ""

  for dons in range(0, len(z), 2):

    num_cod = z[dons+1]

    if z[dons] == 'A':
      if num_cod == 0:
        cods.append("GCC")
      if num_cod == 1:
        cods.append("GCA")
      if num_cod == 2:
        cods.append("GCG")

    if z[dons] == 'B':
      if num_cod == 0:
        cods.append("TAA")
      if num_cod == 1:
        cods.append("TGA")
      if num_cod == 2:
        cods.append("TAG")


    if z[dons] == "C":
      if num_cod == 0:
        cods.append("TGT")
      if num_cod == 1:
        cods.append("TGC")

    if z[dons] == "D":
      if num_cod == 0:
        cods.append("GAT")
      if num_cod == 1:
        cods.append("GAC")

    if z[dons] == "E":
      if num_cod == 0:
        cods.append("GAA")
      if num_cod == 1:
        cods.append("GAG") 

    if z[dons] == "F":
      if num_cod == 0:
        cods.append("TTT")
      if num_cod == 1:
        cods.append("TTC") 

    if z[dons] == "G":
      if num_cod == 0:
        cods.append("GGT")
      if num_cod == 1:
        cods.append("GGC")
      if num_cod == 2:
        cods.append("GGA")
      if num_cod == 3:
        cods.append("GGG")

    if z[dons] == "H":
      if num_cod == 0:
        cods.append("CAT")
      if num_cod == 1:
        cods.append("CAC")

    if z[dons] == "I":
      if num_cod == 0:
        cods.append("ATT")
      if num_cod == 1:
        cods.append("ATC")
      if num_cod == 2:
        cods.append("ATA")
                                      
    if z[dons] == "K":
      if num_cod == 0:
        cods.append("AAG")
      if num_cod == 1:
        cods.append("AAA")

    if z[dons] == "L":
      if num_cod == 0:
        cods.append("CTT")
      if num_cod == 1:
        cods.append("CTC")
      if num_cod == 2:
        cods.append("CTA")
      if num_cod == 3:
        cods.append("CTG")

    if z[dons] == "M":
      if num_cod == 0:
        cods.append("ATG")

    if z[dons] == "N":
      if num_cod == 0:
        cods.append("AAT")
      if num_cod == 1:
        cods.append("AAC")

    if z[dons] == "O":
      if num_cod == 0:
        cods.append("TTA")
      if num_cod == 1:
        cods.append("TTG")

    if z[dons] == "P":
      if num_cod == 0:
        cods.append("CCT")
      if num_cod == 1:
        cods.append("CCC")
      if num_cod == 2:
        cods.append("CCG")

    if z[dons] == "Q":
      if num_cod == 0:
        cods.append("CCA")
      if num_cod == 1:
        cods.append("CAG")

    if z[dons] == "R":
      if num_cod == 0:
        cods.append("CGT")
      if num_cod == 1:
        cods.append("CGC")
      if num_cod == 2:
        cods.append("CGA")
      if num_cod == 3:
        cods.append("CGG")

    if z[dons] == "S":
      if num_cod == 0:
        cods.append("TCT")
      if num_cod == 1:
        cods.append("TCC")
      if num_cod == 2:
        cods.append("TCA")
      if num_cod == 3:
        cods.append("TCG")

    if z[dons] == "T":
      if num_cod == 0:
        cods.append("ACT")
      if num_cod == 1:
        cods.append("ACC")
      if num_cod == 2:
        cods.append("ACA")
      if num_cod == 3:
        cods.append("ACG")

    if z[dons] == "U":
      if num_cod == 0:
        cods.append("AGA")
      if num_cod == 1:
        cods.append("AGG")

    if z[dons] == "V":
      if num_cod == 0:
        cods.append("GTT")
      if num_cod == 1:
        cods.append("GCT")
      if num_cod == 2:
        cods.append("GTA")
      if num_cod == 3:
        cods.append("GTG")

    if z[dons] == "W":
      if num_cod == 0:
        cods.append("TGG")

    if z[dons] == "X":
      if num_cod == 0:
        cods.append("AGT")
      if num_cod == 1:
        cods.append("AGC")

    if z[dons] == "Y":
      if num_cod == 0:
        cods.append("TAT")
    
    if z[dons] == "Z":
      if num_cod == 0:
        cods.append("TAC")
          
  return cods

def nuc_to_bin(f):

  asc_nuc = ""
  for h in f:
    if h == 'A':
      asc_nuc += '00'
    if h == 'C':
      asc_nuc += '01'
    if h == 'G':
      asc_nuc += '10'
    if h == 'T':
      asc_nuc += '11'


  return asc_nuc

from PIL import Image

def decrypt_dna(len_dna, mod_len):

  steg_img = Image.open('stegoImage.png')
  steg_img_pixelMap = steg_img.load()

  sec_msg = []
  dna_index = 0
  for row in range(steg_img.size[0]):
    for col in range(steg_img.size[1]):

      rgb_val = ""
      if dna_index < len_dna :
        r, g, b = rgb_to_bin(steg_img_pixelMap[row, col])
        sec_r = r[6:]
        sec_g = g[5:]
        sec_b = b[5:]

        rgb_val = sec_r + sec_g + sec_b
        sec_msg.append(rgb_val)
        print(sec_msg)
        print(len(sec_msg))



        dna_index += 8

  steg_img.close()
  
  amino = []
  for i in range(0, len(sec_msg), 2):
    alp_bit = bin_to_int(sec_msg[i])
    alp_bit = chr(alp_bit)
    num_bit = bin_to_int(sec_msg[i+1])

    amino.append(alp_bit)
    amino.append(num_bit)

    print(amino)



  dec_codons = amino_to_codons(amino)
  print(dec_codons)

  dec_nucleods = ''.join(dec_codons)
  print("joined nucleods: ", dec_nucleods)
  #len_nuc = len(dec_nucleods) % 3

  print(mod_len)
  print("length of the dna nucleods: ", len(dec_nucleods))

  d_nucleods = []
  if mod_len == 1:
    print(len(dec_nucleods)-2)
    d_nucleods = dec_nucleods[:len(dec_nucleods)-2]
  elif mod_len == 2:
    print(len(dec_nucleods)-1)
    d_nucleods = dec_nucleods[:len(dec_nucleods)-1]
  else:
    d_nucleods = dec_nucleods

  print(d_nucleods)

  nucli_bits = nuc_to_bin(d_nucleods)
  print("nucli_bits:", nucli_bits) 


  #grouping into 8bits binary
  bin_bits = [nucli_bits[i:i+8] for i in range(0, len(nucli_bits), 8)]
  print("bin_bits", bin_bits)

  sec_text = ""
  for txt in bin_bits:
    w = bin_to_int(txt)
    sec_text += chr(w)

  print("Your secret message is :", sec_text)

"""#PSNR VALUE"""

import numpy as np
import math
import cv2


def PSNR_MSE(img1, img2):
  mse = np.mean((img1 - img2) ** 2)
  if mse == 0:
    return (100, 0)
  max_pixel = 255.0
  psnr =  20 * math.log10(max_pixel / math.sqrt(mse))
  return (psnr, mse)

org_img = cv2.imread("cover_image.jpg")
stego_img = cv2.imread("stegoImage.png", 1)
psnr_val, mse_val = PSNR_MSE(org_img, stego_img)
print("PSNR value : ", psnr_val)  
print("MSE value : ", mse_val)

"""#HISTOGRAM OF IMAGE"""

import cv2
from matplotlib import pyplot as plt


org_image = cv2.imread('cover_image.jpg', 0)
hist1 = cv2.calcHist([org_image], [0], None, [256], [0, 256])
plt.title("original image")
plt.xlabel("grayscale value")
plt.ylabel("pixels")
plt.plot(hist1)
plt.show()


steg_image = cv2.imread('stegoImage.png', 0)
hist2 = cv2.calcHist([steg_image], [0], None, [256], [0, 256])
plt.title("stego image")
plt.xlabel("grayscale value")
plt.ylabel("pixels")
plt.plot(hist2)
plt.show()
